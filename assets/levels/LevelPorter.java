import java.io.*;

public class LevelPorter {
    public static void main(String[] args) throws Exception {
        for (int world = 1; world <= 5; world++) {
            for (int level = 1; level <= 5; level++) {
                int i = ((world - 1) * 5 + (level - 1)) + 1;
                int[][] tileData = null;
                if (world == 1) {
                    if (level == 1) tileData = new int[][]{{4,1,0,0,0,0,0,0,0,0,0,0,0},{0,0,1,1,0,2,0,0,0,0,0,0,0},{0,0,1,1,0,0,2,0,0,0,0,0,4},{0,0,0,0,1,0,0,5,0,0,0,0,1},{0,8,0,0,1,1,0,1,2,2,2,0,1},{1,1,0,0,0,0,0,1,2,0,0,0,1},{1,1,0,0,0,0,0,1,2,4,0,0,1}};
                    if (level == 2) tileData = new int[][]{{0,0,0,0,1,0,0,4},{0,0,0,0,1,0,0,0},{0,0,0,0,7,0,0,0},{1,4,1,1,1,1,1,1},{1,0,1,0,0,0,0,6},{5,0,0,0,0,0,0,2},{2,0,2,4,0,0,2,1},{2,0,2,1,1,2,1,1},{2,8,2,1,1,1,1,1}};
                    if (level == 3) tileData = new int[][]{{0,4,1,6,3,0,0,0,0},{7,2,1,1,1,1,0,0,0},{0,0,3,4,2,3,0,0,4},{0,0,1,1,1,1,0,2,2},{8,0,0,0,0,0,0,3,5}};
                    if (level == 4) tileData = new int[][]{{4,0,0,0,7,0,7,0,7,7,0,0,0,0},{3,1,0,0,7,0,0,0,0,0,0,0,0,0},{3,1,0,0,7,7,7,7,0,2,0,0,1,3},{3,1,0,7,7,0,0,0,0,2,0,0,1,3},{3,1,0,0,0,0,7,7,7,1,0,0,1,4},{3,1,7,7,0,0,7,0,7,1,1,0,1,1},{3,1,0,7,0,0,7,0,0,1,0,0,0,0},{3,1,2,2,1,0,7,0,1,1,1,1,0,0},{8,7,5,2,3,0,0,0,7,0,4,1,6,0}};
                    if (level == 5) tileData = new int[][]{{5,3,0,2,2},{2,2,0,3,4},{2,4,7,2,2},{2,3,0,3,0},{8,0,4,2,6}};
                }
                if (world == 2) {
                    if (level == 1) tileData = new int[][]{{1,5,7,0,0,8,7,7,1,4},{1,1,2,0,0,0,7,1,1,3},{2,3,4,3,0,0,7,7,2,0},{1,1,2,0,0,0,0,7,2,7},{1,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,7,0,7},{0,0,1,0,0,0,0,7,0,7},{4,1,1,0,0,0,0,7,6,7}};
                    if (level == 2) tileData = new int[][]{{2,2,2,2,2,2,3,4,3,0,0},{2,3,4,3,0,0,0,3,0,0,0},{2,2,2,1,0,0,0,0,0,0,0},{1,1,1,7,7,7,7,7,7,7,7},{1,1,0,0,0,3,0,7,0,0,0},{1,8,0,0,0,7,4,7,0,7,0},{1,1,0,0,0,7,7,7,0,7,0},{1,1,1,0,5,0,0,0,0,7,6}};
                    if (level == 3) tileData = new int[][]{{1,1,1,1,1,1,1,1,0,0},{1,1,2,3,0,2,5,1,0,0},{1,0,1,1,0,2,3,1,0,0},{1,0,10,1,4,0,0,1,1,1},{1,1,0,1,1,2,0,0,0,0},{1,1,0,4,1,0,1,1,1,0},{1,1,0,1,2,0,0,0,0,0},{1,1,0,1,3,0,1,2,0,1},{1,1,0,0,0,0,3,4,1,1},{1,1,1,1,1,1,1,1,1,1}};
                    if (level == 4) tileData = new int[][]{{10,0,0,0,0,0,3,2,1,1,1},{1,1,0,2,0,0,1,1,1,1,1},{0,4,0,1,0,0,7,0,0,0,0},{0,2,2,1,0,0,7,0,0,0,0},{0,0,0,1,0,2,7,0,0,0,0},{7,7,7,1,0,1,7,0,0,5,0},{0,11,0,1,4,1,2,2,2,2,2},{1,1,1,1,0,1,0,0,0,0,6},{0,0,0,0,0,0,0,0,0,0,0},{3,3,3,3,3,3,3,3,3,3,3},{2,2,4,2,2,2,2,2,2,2,2}};
                    if (level == 5) tileData = new int[][]{{0,7,0,0,0,0,0,0,7,4},{5,7,0,0,0,0,0,0,7,7},{7,7,0,0,0,0,0,0,0,0},{0,7,0,0,0,0,0,0,0,0},{0,1,3,3,3,3,3,2,7,7},{4,1,0,0,0,0,0,2,0,0},{1,1,0,0,0,0,0,2,0,0},{8,0,0,2,2,2,3,1,0,0},{1,1,1,2,2,2,3,1,0,0},{6,0,0,0,0,0,0,1,0,4}};
                }
                if (world == 3) {
                    if (level == 1) tileData = new int[][]{{0,0,0,0,0,0,7,7,0,0,0,1,1},{0,4,0,0,0,0,7,7,0,0,0,1,1},{0,0,0,0,0,0,7,7,0,5,0,1,1},{0,0,0,0,0,0,7,7,1,1,1,1,6},{1,1,1,1,1,1,1,1,1,1,1,1,1},{0,0,7,7,0,0,0,0,0,0,0,0,4},{0,0,7,7,0,0,0,0,0,0,0,0,0},{4,0,7,7,0,0,0,0,0,0,0,12,0},{12,0,7,7,0,8,0,0,0,0,0,0,0}};
                    if (level == 2) tileData = new int[][]{{2,0,4,4,2},{2,0,5,4,2},{2,1,2,2,2},{2,0,0,0,2},{2,12,0,8,2}};
                    if (level == 3) tileData = new int[][]{{1,12,1,12,1,12,1,12,1,12,1,12,1,12,2,12,4},{12,1,12,1,12,2,12,2,12,1,12,2,12,4,12,2,12},{1,12,1,12,2,12,2,12,1,12,2,12,2,12,2,12,1},{12,1,12,2,12,2,12,2,12,1,12,1,12,2,12,1,12},{1,12,1,12,1,12,2,12,2,12,2,12,2,12,2,12,1},{12,2,12,1,12,2,12,2,12,2,12,1,12,1,12,1,12},{2,12,4,12,2,12,1,12,1,12,1,12,1,12,2,12,1},{12,2,12,2,12,1,12,2,12,2,12,1,12,1,12,2,12},{2,12,2,12,1,12,2,12,2,12,2,12,1,12,2,12,2},{12,2,12,1,12,2,12,1,12,1,12,2,12,1,12,2,12},{2,12,1,12,1,12,2,12,5,12,2,12,1,12,2,12,2},{12,2,12,1,12,2,12,1,12,2,12,1,12,2,12,2,12},{2,12,1,12,1,12,2,12,2,12,1,12,2,12,2,12,2},{12,2,12,1,12,2,12,1,12,1,12,2,12,2,12,2,12},{2,8,12,12,2,12,2,12,2,12,2,12,2,12,2,12,2}};
                    if (level == 4) tileData = new int[][]{{0,0,0,7,7,12,2,0,0,0,0,0,12},{0,0,0,7,7,0,2,0,0,0,0,0,4},{4,0,12,7,7,0,2,1,2,2,2,2,2},{1,1,1,7,0,0,2,3,2,4,0,0,0},{0,1,1,0,0,0,0,0,0,0,0,0,0},{12,1,1,1,0,0,0,0,0,0,0,0,1},{11,1,1,5,1,0,10,0,0,0,0,1,6}};
                    if (level == 5) tileData = new int[][]{{12,2,2,0,0,0,0,2,2,2,2,2,2,2,2},{0,1,2,1,2,2,0,2,1,2,2,0,0,1,2},{0,2,2,0,1,2,0,0,0,1,12,0,0,2,2},{10,1,4,0,2,2,0,0,0,2,2,0,0,2,4},{0,2,2,0,1,2,0,12,0,1,2,0,0,1,0},{0,1,2,0,2,2,1,2,1,2,2,2,1,2,0},{0,2,2,12,1,2,12,4,2,2,2,2,2,5,0}};
                }
                if (world == 4) {
                    if (level == 1) tileData = new int[][]{{1,4,1,0,0,0,0,13,13,13,13,13},{1,13,1,5,0,0,0,13,13,13,13,13},{0,0,0,2,0,0,0,13,13,13,13,13},{0,0,0,0,0,0,0,13,13,4,13,13},{2,2,2,0,0,0,0,13,13,13,13,13},{0,0,2,0,0,0,0,13,13,13,13,13},{4,0,14,0,0,0,0,13,13,13,13,13},{0,0,2,0,0,8,0,13,13,13,13,13}};
                    if (level == 2) tileData = new int[][]{{0,0,0,0,1,0,0,0,14,14,14,0,0,0},{0,8,0,0,13,0,0,0,14,14,14,0,16,0},{0,0,0,0,1,0,0,0,14,14,14,0,0,0},{1,1,1,1,1,0,0,0,1,1,1,1,1,1},{0,14,0,14,0,14,4,14,0,14,0,14,0,14},{14,0,14,0,14,0,14,0,14,0,14,0,14,0},{0,14,0,14,0,14,0,14,0,14,0,14,0,14},{14,0,14,0,14,0,14,0,14,0,14,0,4,0},{0,14,0,14,0,14,0,14,0,14,0,14,0,14},{14,0,4,0,14,0,14,0,14,0,14,0,14,0},{0,14,0,14,0,14,0,14,0,14,0,14,0,14},{14,0,14,0,14,0,14,5,14,0,14,0,14,0}};
                    if (level == 3) tileData = new int[][]{{0,0,4,0,5},{0,0,1,1,1},{14,14,1,4,11},{3,3,1,14,14},{0,0,1,14,14},{1,7,7,7,7},{0,13,0,2,2},{6,13,0,0,0},{1,1,0,0,0},{4,1,1,1,0},{0,0,0,0,0},{1,14,14,1,2},{0,0,0,0,0},{1,1,1,1,0},{10,0,0,13,0}};
                    if (level == 4) tileData = new int[][]{{0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},{0,10,0,1,11,0,12,1,0,4,0,1,0,4,0},{0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},{1,0,1,1,1,1,1,1,1,7,1,1,1,13,1},{0,0,0,1,0,0,0,1,0,0,0,1,14,14,14},{0,12,0,1,0,0,0,14,0,0,0,3,14,14,14},{0,0,0,1,0,0,0,1,0,0,13,1,14,14,14},{1,1,1,1,1,13,1,1,1,1,1,1,1,13,1},{0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},{0,0,0,13,0,0,0,1,0,6,0,1,0,16,0},{0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},{1,1,1,1,1,0,1,1,1,0,1,1,1,1,1},{0,0,0,1,0,0,0,1,0,0,0,1,0,0,0},{0,4,0,14,0,0,0,13,0,0,0,7,0,5,0},{0,0,0,1,0,0,0,1,0,0,0,1,0,0,0}};
                    if (level == 5) tileData = new int[][]{{0,0,0,1,0,1,0,7,4,1,0,0,0,1,0},{1,1,0,1,0,1,0,1,1,1,0,1,1,1,0},{0,13,0,0,0,1,0,0,0,1,0,13,0,0,0},{7,1,1,1,0,1,0,1,0,1,0,1,0,1,1},{5,1,0,0,0,13,0,1,0,0,0,1,0,0,0},{1,1,0,1,0,1,1,1,13,1,1,1,0,1,0},{0,1,0,1,0,1,0,0,0,0,0,0,0,1,0},{0,1,0,1,1,1,0,10,0,1,1,1,0,1,0},{0,13,0,0,0,1,0,0,0,14,14,1,0,0,0},{0,1,0,1,1,1,1,1,1,1,14,1,14,1,1},{0,1,0,1,0,0,12,1,14,14,14,14,14,1,14},{1,1,0,1,13,1,1,1,14,1,14,1,14,1,14},{4,1,0,0,0,0,0,14,14,1,14,14,14,14,14},{7,1,0,1,1,1,7,1,1,1,14,1,1,1,1},{0,13,0,0,6,1,0,0,4,1,14,14,14,14,11}};
                }
                if (world == 5) {
                    if (level == 1) tileData = new int[][]{{8,20,0,0,0,0,0,0,0},{1,1,0,0,0,0,0,0,0},{0,3,0,0,0,0,0,5,0},{17,1,0,0,0,1,1,1,1},{4,18,0,0,0,20,0,0,0},{1,1,0,0,0,20,0,4,0},{4,20,0,0,0,20,12,0,12}};
                    if (level == 2) tileData = new int[][]{{8,20,0,18,0,0,0,18,0,12,1,5},{1,1,0,18,0,6,0,18,0,0,1,14},{0,18,0,18,0,0,0,18,0,0,1,3},{3,2,19,1,1,1,1,1,19,1,1,3},{4,2,7,1,2,2,2,19,4,18,1,3},{0,20,0,20,19,19,19,3,2,0,1,3},{14,1,1,1,7,7,7,12,20,0,1,3},{14,14,14,1,0,0,0,2,1,0,18,0},{14,14,14,20,0,4,0,20,0,0,18,0},{14,14,14,1,0,0,0,20,0,0,18,0}};
                    if (level == 3) tileData = new int[][]{{17,20,19,19,4,20,17,20,19,4,20},{19,20,17,19,17,19,20,18,18,18,20},{20,20,19,19,20,20,20,20,20,19,18},{17,20,17,17,19,18,18,20,18,19,18},{19,17,19,19,19,17,20,18,19,20,18},{20,18,18,17,20,18,17,19,18,18,18},{18,19,20,20,17,18,18,18,18,17,20},{18,18,18,5,19,18,20,19,18,20,18},{19,18,18,18,19,19,20,17,20,18,20},{20,17,18,20,20,18,19,4,19,18,19},{17,17,17,18,17,18,19,20,18,19,8}};
                    if (level == 4) tileData = new int[][]{{0,7,18,0,0,2,0,18,0},{12,0,1,0,0,0,0,14,0},{1,0,20,0,0,2,0,2,4},{1,1,20,0,0,2,2,2,2},{4,1,1,0,0,0,0,5,0},{7,1,0,0,0,0,0,1,14},{10,20,0,0,0,0,4,1,6}};
                    if (level == 5) tileData = new int[][]{{4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},{4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},{4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},{4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},{4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},{4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},{4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},{4,4,4,4,4,4,8,4,5,4,4,4,4,4,4},{4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},{4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},{4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},{4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},{4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},{4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},{4,4,4,4,4,4,4,4,4,4,4,4,4,4,4}};
                }
                ByteArrayOutputStream stream = new ByteArrayOutputStream();
                int spawnX = 0;
                int spawnY = 0;
                boolean isSpotlight = false;
                for (int y = 0; y < tileData.length; y++) {
                    for (int x = 0; x < tileData[y].length; x++) {
                        if (tileData[y][x] == 8) {
                            spawnX = x;
                            spawnY = y;
                        }
                        if (tileData[y][x] == 10) {
                            spawnX = x;
                            spawnY = y;
                            isSpotlight = true;
                        }
                    }
                }
                stream.write((byte)spawnX);
                stream.write((byte)spawnY);
                stream.write((byte)(isSpotlight ? 1 : 0));
                stream.write((byte)tileData[0].length);
                stream.write((byte)tileData.length);
                for (int y = 0; y < tileData.length; y++) {
                    for (int x = 0; x < tileData[y].length; x++) {
                        stream.write(convertTile(tileData[y][x]));
                    }
                }
                stream.close();
                OutputStream out = new FileOutputStream(new File(i + ".lvl"));
                out.write(stream.toByteArray());
                out.close();
            }
        }
    }
    public static byte convertTile(int tileID) {
        if (tileID == 1) return 1;
        if (tileID == 2) return 2;
        if (tileID == 3) return 3;
        if (tileID == 4) return 4;
        if (tileID == 5) return 5;
        if (tileID == 6) return 6;
        if (tileID == 7) return 8;
        if (tileID == 9) return 7;
        if (tileID == 11) return 9;
        if (tileID == 12) return 10;
        if (tileID == 13) return 11;
        if (tileID == 14) return 12;
        if (tileID == 15) return 13;
        if (tileID == 16) return 14;
        if (tileID == 17) return 15;
        if (tileID == 18) return 16;
        if (tileID == 19) return 18;
        if (tileID == 20) return 17;
        return 0;
    }
}